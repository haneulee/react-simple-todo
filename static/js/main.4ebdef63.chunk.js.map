{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","currentItem","text","target","value","key","Date","now","done","setState","addItem","preventDefault","newItem","state","items","concat","toConsumableArray","allNum","length","completeItem","keyVal","temp","forEach","item","comNum","react_default","a","createElement","Fragment","Todo_ToDoItem","inputEl","className","Todo_ToDos","Component","ToDos","props","onClick","_this2","listItems","map","createTasks","ToDoItem","_this$props","onSubmit","ref","onChange","type","App","Todo_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ebdef63.chunk.js","sourcesContent":["// import cx from \"classnames\";\nimport React, { Component } from \"react\";\n\nexport default class TodoList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      currentItem: { text: \"\", key: \"\", done: false },\n      allNum: 0,\n      comNum: 0\n    };\n  }\n  handleInput = e => {\n    const itemText = e.target.value;\n    const currentItem = { text: itemText, key: Date.now(), done: false };\n    this.setState({\n      currentItem\n    });\n  };\n  addItem = e => {\n    e.preventDefault();\n\n    const newItem = this.state.currentItem;\n\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n\n      this.setState({\n        items: items,\n        currentItem: { text: \"\", key: \"\", done: false },\n        allNum: this.state.items.length + 1\n      });\n    }\n  };\n  completeItem = keyVal => {\n    let temp = 0;\n    let items = this.state.items;\n    items.forEach(item => {\n      if (item.key === keyVal) {\n        item.done = !item.done;\n      }\n\n      if (item.done) {\n        temp++;\n      }\n    });\n    this.setState({\n      items: items,\n      comNum: temp\n    });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <h2>Todo List</h2>\n          <ToDoItem\n            addItem={this.addItem}\n            inputEl={this.inputEl}\n            handleInput={this.handleInput}\n            currentItem={this.state.currentItem}\n          />\n          <h2 className=\"task-counter\">{`${\n            this.state.comNum\n          } remaining out of ${this.state.allNum} tasks`}</h2>\n          <ToDos items={this.state.items} completeItem={this.completeItem} />\n        </div>\n        <style>{`\n                    .is-done {\n                        text-decoration: line-through;\n                    }\n                `}</style>\n      </React.Fragment>\n    );\n  }\n}\n\nclass ToDos extends Component {\n  createTasks(item, props) {\n    const { completeItem } = props;\n    return (\n      <li\n        key={item.key}\n        onClick={() => completeItem(item.key)}\n        className={!!item.done ? \"is-done\" : \"\"}\n      >\n        {item.text}\n      </li>\n    );\n  }\n  render() {\n    const { items } = this.props;\n    const listItems = items.map(item => this.createTasks(item, this.props));\n\n    return <ul>{listItems}</ul>;\n  }\n}\n\nclass ToDoItem extends Component {\n  render() {\n    const { addItem, inputEl, currentItem, handleInput } = this.props;\n    return (\n      <form onSubmit={addItem}>\n        <input ref={inputEl} value={currentItem.text} onChange={handleInput} />\n        <button type=\"submit\">add</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ToDoList from \"./Todo\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}